@model MasterRad.Models.ViewModels.TestResultsVM
@{
    ViewData["Title"] = "Test results";
}

<div hidden>
    <input type="text" value="@(Model.TestId)" id="test-id">
    <input type="text" value="@((int)Model.TestType)" id="test-type">
</div>

<h1>Test results</h1>

<div>"@Model.JobId"</div>

<br />
<br />

<div class="row">
    <div class="col-md-12">
        <h2>Start background process</h2>
        <p>Start a long running process by clicking on the button below:</p>
        <button onclick="startProgress()" class="btn btn-primary btn-lg">Queue Background Job</button>
    </div>
</div>

<br />
<br />

<p>Status of your background job: <strong><span id="job-status">Waiting to start...</span></strong></p>

@section Scripts {
    <script src="~/lib/signalr/signalr.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/jobprogress")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.on("progress",
            (percent) => {
                if (percent === 100) {
                    document.getElementById("job-status").innerText = "Finished!";
                } else {
                    document.getElementById("job-status").innerText = `${percent}%`;
                }
            });

        connection.start()
            .then(_ => connection.invoke("AssociateJob", "@Model.JobId"))
            .catch(err => console.error(err.toString()));

        function startProgress() {
            $.ajax({
                url: '/api/Evaluate/StartProgress',
                dataType: 'json',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({}),
                success: function (data, textStatus, jQxhr) {
                    alert('started');
                }
            });
        }
    </script>
}
